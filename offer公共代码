1.listNode
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None


def getList(ar):
    p = ListNode(ar[0])
    q = p
    for i in range(1, len(ar)):
        q.next = ListNode(ar[i])
        q = q.next
    return p


def printList(p):
    while p is not None:
        print p.val
        p = p.next
        
        
        
        
2. TreeNode
from collections import deque
import re


class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


# {8,8,7,9,2,#,#,#,#,4,7},{8,9,2}

def getTree(a):
    if not a or len(a) == 0 or a[0] == "#":
        return None
    root = TreeNode(a[0])
    li = deque()
    li.append(root)
    index = [1]
    while index[0] < len(a):
        t = li.popleft()
        getTreeHelper(t, li, a, index)
    return root


def getTreeHelper(t, li, a, index):
    i = index[0]
    if t is None or i == len(a):
        return
    if i < len(a):
        if a[i] != "#":
            t.left = TreeNode(a[i])
            li.append(t.left)
        i += 1
    if i < len(a):
        if a[i] != "#":
            t.right = TreeNode(a[i])
            li.append(t.right)
        i += 1
    index[0] = i
    return t


def printTree(t):
    re = []
    if type(t) is list:
        re = t
    else:
        d = deque()
        preT = TreeNode(-1)
        preT.left = t
        d.append(t)
        while len(d) > 0:
            t = d.popleft()
            listHelper(t, re, d)
        printHelper(re)
        # print ",".join(re)


def listHelper(t, re, de):
    if t:
        re.append(t.val)
        de.append(t.left)
        de.append(t.right)
    else:
        re.append("#")


def printHelper(res):
    str2 = ','.join(str(i) for i in res)
    print re.sub(r"(,#)+$", "", str2, 0)


a = [8, 8, 7, 9, 2, "#", "#", "#", "#", 4, 7]

t = getTree(a)
printTree(t)
