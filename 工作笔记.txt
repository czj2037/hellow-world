1.bootsrap switch
http://www.bootcdn.cn/bootstrap-switch/readme/

2.spring
https://blog.csdn.net/a745233700/article/details/80959716
https://blog.csdn.net/ying847782627/article/details/51508303
3.java多线程
https://www.cnblogs.com/wxd0108/p/5479442.html
4.spark调优
https://blog.csdn.net/lsshlsw/article/details/49155087
http://lxw1234.com/archives/category/spark

5.b+树适合做索引
https://blog.csdn.net/u013235478/article/details/50625677
MyISAM——非聚簇索引
InnoDB——聚簇索引
https://blog.csdn.net/tongdanping/article/details/79878302

6.生产者消费者模型
生产者使用“? extends T”通配符，消费者使用“? super T”通配符
https://blog.csdn.net/xx326664162/article/details/52175283
7.
log4j.logger.org.springframework.orm.jpa=DEBUG
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

8. logback配置文档
http://www.logback.cn/04%E7%AC%AC%E5%9B%9B%E7%AB%A0Appenders.html

9.restful
https://github.com/aisuhua/restful-api-design-references

12. status code
https://github.com/bolasblack/http-api-guide
https://www.ibm.com/developerworks/cn/web/1103_chenyan_restapi/

13.tune spark job
翻译文 缺图片
https://www.zybuluo.com/xiaop1987/note/76737
https://www.zybuluo.com/xiaop1987/note/102894

http://ju.outofmemory.cn/entry/203097 原文

14. Octotree

15.flushmode 为read，临时规避办法，不检查读写
	<bean id="hibernateTemplate"
		class="org.springframework.orm.hibernate4.HibernateTemplate"
		  p:sessionFactory-ref="sessionFactory" >
		<property name="checkWriteOperations" value="false"/>
	</bean>

16.
l = mid + 1; 能退出循环
public int firstBadVersion(int n) {
    int l = 1, h = n;
    while (l < h) {
        int mid = l + (h - l) / 2;
        if (isBadVersion(mid)) {
            h = mid;
        } else {
            l = mid + 1;
        }
    }
    return l;
}

17.
《Kubernetes实战 》
《Kubernetes权威指南:从Docker到Kubernetes实践全接触(第2版)》
k8s中文文档 http://docs.kubernetes.org.cn/

18.MySQL B+树索引和哈希索引的区别
简单地说，哈希索引就是采用一定的哈希算法，把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快。
如果是等值查询，那么哈希索引明显有绝对优势，因为只需要经过一次算法即可找到相应的键值；当然了，这个前提是，键值都是唯一的。如果键值不是唯一的，就需要先找到该键所在位置，然后再根据链表往后扫描，直到找到相应的数据；
从示意图中也能看到，如果是范围查询检索，这时候哈希索引就毫无用武之地了，因为原先是有序的键值，经过哈希算法后，有可能变成不连续的了，就没办法再利用索引完成范围查询检索；
同理，哈希索引也没办法利用索引完成排序，以及like ‘xxx%’ 这样的部分模糊查询（这种部分模糊查询，其实本质上也是范围查询）；
哈希索引也不支持多列联合索引的最左匹配规则；
B+树索引的关键字检索效率比较平均，不像B树那样波动幅度大，在有大量重复键值情况下，哈希索引的效率也是极低的，因为存在所谓的哈希碰撞问题。

19.
MyISAM——非聚簇索引
InnoDB——聚簇索引
https://blog.csdn.net/tongdanping/article/details/79878302
